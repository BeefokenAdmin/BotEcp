from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue,
)
import requests
import math
import datetime
import json
import logging

# –í–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
logging.basicConfig(level=logging.DEBUG)

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω —Å—é–¥–∞
TOKEN = '7250376634:AAFBE6vuPF1yfbuXGyfHD3wKecUcRqBGmtQ'

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞)
ALLOWED_USERS = {669247439, 415542031, 641770720}  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_allowed(user_id):
    return user_id in ALLOWED_USERS

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞—à–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞
def get_data_from_site(action):
    try:
        response = requests.get(f'http://192.168.0.3/ecp/php/api.php?action={action}')  # –ó–∞–º–µ–Ω–∏—Ç–µ <IP-–∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞> –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π IP
        if response.status_code == 200:
            return response.json()
    except requests.exceptions.RequestException as e:
        logging.error(f"Error accessing API for action '{action}': {e}")
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_reply_keyboard():
    keyboard = [
        [KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏")],
        [KeyboardButton("‚åõÔ∏è –ó–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –ø–æ–¥–ø–∏—Å–∏"), KeyboardButton("üîç –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∏")],
        [KeyboardButton("üÜï –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø—É—Å—Ç–∏—Ç—å"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_long_message(context, chat_id, text, reply_markup=None):
    message_ids = []
    for i, chunk in enumerate([text[i:i + 4096] for i in range(0, len(text), 4096)]):
        msg = await context.bot.send_message(chat_id=chat_id, text=chunk, reply_markup=reply_markup if i == len(text) // 4096 else None)
        message_ids.append(msg.message_id)
    return message_ids

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def delete_messages(context, chat_id, message_ids):
    for message_id in message_ids:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        except Exception as e:
            logging.warning(f"Failed to delete message {message_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def send_paginated_message(context, chat_id, data, page, callback_prefix, reply_markup=None):
    items_per_page = 20
    total_pages = math.ceil(len(data) / items_per_page)
    start_idx = page * items_per_page
    end_idx = start_idx + items_per_page

    message = ''
    for employee in data[start_idx:end_idx]:
        message += f"–§–ò–û: {employee['name']}\n–û—Ç–¥–µ–ª: {employee['job']}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏: {employee['expiration_date']}\n\n"

    keyboard = []
    if page > 0:
        keyboard.append(InlineKeyboardButton("‚óÄÔ∏è –ü—Ä–æ—à–ª–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"{callback_prefix}_{page-1}"))
    if page < total_pages - 1:
        keyboard.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚ñ∂Ô∏è", callback_data=f"{callback_prefix}_{page+1}"))
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    reply_markup = InlineKeyboardMarkup([
        keyboard,  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')]  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    ])

    message_ids = await send_long_message(context, chat_id, message, reply_markup=reply_markup)
    context.user_data['message_ids'] = message_ids
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    try:
        if 'user_ids' not in context.bot_data:
            context.bot_data['user_ids'] = set()
        context.bot_data['user_ids'].add(user_id)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ Reply Keyboard
        reply_keyboard = create_reply_keyboard()
        
        welcome_message = "üìã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await update.message.reply_text(
            welcome_message,
            reply_markup=reply_keyboard,
            parse_mode='HTML'
        )
        logging.info(f"User {user_id} started interaction.")
    except Exception as e:
        logging.error(f"Error in start function: {e}")
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.')

async def all_employees(update: Update, context: ContextTypes.DEFAULT_TYPE, page=0):
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    try:
        data = get_data_from_site('get_signatures')
        if data:
            data.sort(key=lambda x: x['name'])  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏
            await send_paginated_message(context, update.message.chat_id, data, page, 'all_employees')
            logging.info(f"User {user_id} requested all employees.")
        else:
            await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (all_employees).', reply_markup=create_reply_keyboard())
    except Exception as e:
        logging.error(f"Error in all_employees function: {e}")
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.', reply_markup=create_reply_keyboard())

async def expiring_signatures(update: Update, context: ContextTypes.DEFAULT_TYPE, page=0):
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    try:
        data = get_data_from_site('get_expiring_signatures')
        logging.debug(f"Data from site (expiring_signatures): {json.dumps(data, ensure_ascii=False, indent=2)}")

        if data:
            now = datetime.datetime.now()
            expiring_data = [
                employee for employee in data
                if now <= datetime.datetime.strptime(employee['expiration_date'], '%Y-%m-%d') <= (now + datetime.timedelta(days=10))
            ]
            logging.debug(f"Filtered expiring data: {json.dumps(expiring_data, ensure_ascii=False, indent=2)}")

            if expiring_data:
                expiring_data.sort(key=lambda x: x['expiration_date'])  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
                await send_paginated_message(context, update.message.chat_id, expiring_data, page, 'expiring_signatures')
                logging.info(f"User {user_id} requested expiring signatures.")
            else:
                await update.message.reply_text('–ù–µ—Ç –ø–æ–¥–ø–∏—Å–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è.', reply_markup=create_reply_keyboard())
        else:
            await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (expiring_signatures).', reply_markup=create_reply_keyboard())
    except Exception as e:
        logging.error(f"Error in expiring_signatures function: {e}")
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.', reply_markup=create_reply_keyboard())

async def expired_signatures(update: Update, context: ContextTypes.DEFAULT_TYPE, page=0):
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    try:
        data = get_data_from_site('get_expired_signatures')
        logging.debug(f"Data from site (expired_signatures): {json.dumps(data, ensure_ascii=False, indent=2)}")

        if data:
            expired_data = [
                employee for employee in data
                if datetime.datetime.strptime(employee['expiration_date'], '%Y-%m-%d') < datetime.datetime.now()
            ]
            logging.debug(f"Filtered expired data: {json.dumps(expired_data, ensure_ascii=False, indent=2)}")

            expired_data.sort(key=lambda x: x['expiration_date'])  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
            await send_paginated_message(context, update.message.chat_id, expired_data, page, 'expired_signatures')
            logging.info(f"User {user_id} requested expired signatures.")
        else:
            await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (expired_signatures).', reply_markup=create_reply_keyboard())
    except Exception as e:
        logging.error(f"Error in expired_signatures function: {e}")
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.', reply_markup=create_reply_keyboard())

async def to_be_issued(update: Update, context: ContextTypes.DEFAULT_TYPE, page=0):
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    try:
        data = get_data_from_site('get_to_be_issued')
        logging.debug(f"Data from site (to_be_issued): {json.dumps(data, ensure_ascii=False, indent=2)}")

        if data:
            to_be_issued_data = [
                employee for employee in data
                if employee['status'] in ['–ù–µ –≤—ã–ø—É—â–µ–Ω–∞', '–í—ã–ø—É—Å–∫–∞–µ—Ç—Å—è']
            ]
            logging.debug(f"Filtered to be issued data: {json.dumps(to_be_issued_data, ensure_ascii=False, indent=2)}")

            to_be_issued_data.sort(key=lambda x: x['expiration_date'])  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
            await send_paginated_message(context, update.message.chat_id, to_be_issued_data, page, 'to_be_issued')
            logging.info(f"User {user_id} requested to be issued signatures.")
        else:
            await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (to_be_issued).', reply_markup=create_reply_keyboard())
    except Exception as e:
        logging.error(f"Error in to_be_issued function: {e}")
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.', reply_markup=create_reply_keyboard())
async def search_by_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    try:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞:', reply_markup=create_reply_keyboard())
        context.user_data['awaiting_search_name'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏
        logging.info(f"User {user_id} initiated name search.")
    except Exception as e:
        logging.error(f"Error in search_by_name function: {e}")
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.', reply_markup=create_reply_keyboard())

async def search_by_name_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏
        if context.user_data.get('awaiting_search_name', False):
            query = update.message.text  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            data = get_data_from_site('get_signatures')
            if data:
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ–∞–º–∏–ª–∏–∏
                filtered_data = [employee for employee in data if query.lower() in employee['name'].lower()]
                if filtered_data:
                    filtered_data.sort(key=lambda x: x['name'])  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏
                    message = ''
                    for employee in filtered_data:
                        message += f"–§–ò–û: {employee['name']}\n–û—Ç–¥–µ–ª: {employee['job']}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏: {employee['expiration_date']}\n\n"
                    await update.message.reply_text(f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n{message}', reply_markup=create_reply_keyboard())
                else:
                    await update.message.reply_text('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å —Ç–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', reply_markup=create_reply_keyboard())
                logging.info(f"User {user_id} performed a name search for '{query}'.")
            else:
                await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.', reply_markup=create_reply_keyboard())
            context.user_data['awaiting_search_name'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        else:
            await update.message.reply_text('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.', reply_markup=create_reply_keyboard())
    except Exception as e:
        logging.error(f"Error in search_by_name_result function: {e}")
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.', reply_markup=create_reply_keyboard())

async def notify_expiring_signatures(context: ContextTypes.DEFAULT_TYPE):
    try:
        data = get_data_from_site('get_signatures')
        if data:
            now = datetime.datetime.now()
            ten_days_later = now + datetime.timedelta(days=10)
            message = '–ü–æ–¥–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 10 –¥–Ω–µ–π:\n\n'
            for employee in data:
                expiration_date = datetime.datetime.strptime(employee['expiration_date'], '%Y-%m-%d')
                if expiration_date.date() == ten_days_later.date():
                    message += f"–§–ò–û: {employee['name']}\n–û—Ç–¥–µ–ª: {employee['job']}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏: {employee['expiration_date']}\n\n"
            
            if message == '–ü–æ–¥–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 10 –¥–Ω–µ–π:\n\n':
                message += '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–µ–π, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö —á–µ—Ä–µ–∑ 10 –¥–Ω–µ–π.'

            for user_id in context.bot_data.get('user_ids', []):
                if is_user_allowed(user_id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
                    await context.bot.send_message(chat_id=user_id, text=message, reply_markup=create_reply_keyboard())
        logging.info("Notification for expiring signatures sent to allowed users.")
    except Exception as e:
        logging.error(f"Error in notify_expiring_signatures function: {e}") 
        for user_id in context.bot_data.get('user_ids', []):
            if is_user_allowed(user_id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
                await context.bot.send_message(chat_id=user_id, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –ø–æ–¥–ø–∏—Å—è—Ö.', reply_markup=create_reply_keyboard())

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if not is_user_allowed(user_id):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
    if text == "üë• –í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å –ø–æ–¥–ø–∏—Å—è–º–∏":
        await all_employees(update, context)
    elif text == "üîç –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏":
        await search_by_name(update, context)
    elif text == "‚åõÔ∏è –ó–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –ø–æ–¥–ø–∏—Å–∏":
        await expiring_signatures(update, context)
    elif text == "üîç –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∏":
        await expired_signatures(update, context)
    elif text == "üÜï –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø—É—Å—Ç–∏—Ç—å":
        await to_be_issued(update, context)
    elif text == "üîô –ù–∞–∑–∞–¥":
        await start(update, context)
    else:
        await search_by_name_result(update, context)

def main():
    logging.debug("Starting bot...")
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Reply Keyboard

    # –°–æ–∑–¥–∞–Ω–∏–µ JobQueue
    job_queue = application.job_queue
    job_queue.run_daily(notify_expiring_signatures, time=datetime.time(hour=12, minute=0, second=0))

    try:
        application.run_polling()
    except Exception as e:
        logging.error(f"An error occurred: {e}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

if __name__ == '__main__':
    main()

